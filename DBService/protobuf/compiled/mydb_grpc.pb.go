// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: protobuf/raw/mydb.proto

package compiled

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DatabaseService_GetByKey_FullMethodName    = "/DatabaseService/GetByKey"
	DatabaseService_GetAll_FullMethodName      = "/DatabaseService/GetAll"
	DatabaseService_Insert_FullMethodName      = "/DatabaseService/Insert"
	DatabaseService_Update_FullMethodName      = "/DatabaseService/Update"
	DatabaseService_DeleteByKey_FullMethodName = "/DatabaseService/DeleteByKey"
)

// DatabaseServiceClient is the client API for DatabaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseServiceClient interface {
	GetByKey(ctx context.Context, in *GetByKeyRequest, opts ...grpc.CallOption) (*Row, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*AllRows, error)
	Insert(ctx context.Context, in *Row, opts ...grpc.CallOption) (*DBResponse, error)
	Update(ctx context.Context, in *Row, opts ...grpc.CallOption) (*DBResponse, error)
	DeleteByKey(ctx context.Context, in *DeleteByKeyRequest, opts ...grpc.CallOption) (*DBResponse, error)
}

type databaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseServiceClient(cc grpc.ClientConnInterface) DatabaseServiceClient {
	return &databaseServiceClient{cc}
}

func (c *databaseServiceClient) GetByKey(ctx context.Context, in *GetByKeyRequest, opts ...grpc.CallOption) (*Row, error) {
	out := new(Row)
	err := c.cc.Invoke(ctx, DatabaseService_GetByKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*AllRows, error) {
	out := new(AllRows)
	err := c.cc.Invoke(ctx, DatabaseService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) Insert(ctx context.Context, in *Row, opts ...grpc.CallOption) (*DBResponse, error) {
	out := new(DBResponse)
	err := c.cc.Invoke(ctx, DatabaseService_Insert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) Update(ctx context.Context, in *Row, opts ...grpc.CallOption) (*DBResponse, error) {
	out := new(DBResponse)
	err := c.cc.Invoke(ctx, DatabaseService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) DeleteByKey(ctx context.Context, in *DeleteByKeyRequest, opts ...grpc.CallOption) (*DBResponse, error) {
	out := new(DBResponse)
	err := c.cc.Invoke(ctx, DatabaseService_DeleteByKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseServiceServer is the server API for DatabaseService service.
// All implementations must embed UnimplementedDatabaseServiceServer
// for forward compatibility
type DatabaseServiceServer interface {
	GetByKey(context.Context, *GetByKeyRequest) (*Row, error)
	GetAll(context.Context, *GetAllRequest) (*AllRows, error)
	Insert(context.Context, *Row) (*DBResponse, error)
	Update(context.Context, *Row) (*DBResponse, error)
	DeleteByKey(context.Context, *DeleteByKeyRequest) (*DBResponse, error)
	mustEmbedUnimplementedDatabaseServiceServer()
}

// UnimplementedDatabaseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDatabaseServiceServer struct {
}

func (UnimplementedDatabaseServiceServer) GetByKey(context.Context, *GetByKeyRequest) (*Row, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByKey not implemented")
}
func (UnimplementedDatabaseServiceServer) GetAll(context.Context, *GetAllRequest) (*AllRows, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedDatabaseServiceServer) Insert(context.Context, *Row) (*DBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedDatabaseServiceServer) Update(context.Context, *Row) (*DBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDatabaseServiceServer) DeleteByKey(context.Context, *DeleteByKeyRequest) (*DBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByKey not implemented")
}
func (UnimplementedDatabaseServiceServer) mustEmbedUnimplementedDatabaseServiceServer() {}

// UnsafeDatabaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseServiceServer will
// result in compilation errors.
type UnsafeDatabaseServiceServer interface {
	mustEmbedUnimplementedDatabaseServiceServer()
}

func RegisterDatabaseServiceServer(s grpc.ServiceRegistrar, srv DatabaseServiceServer) {
	s.RegisterService(&DatabaseService_ServiceDesc, srv)
}

func _DatabaseService_GetByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_GetByKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetByKey(ctx, req.(*GetByKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Row)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_Insert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).Insert(ctx, req.(*Row))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Row)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).Update(ctx, req.(*Row))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_DeleteByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).DeleteByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_DeleteByKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).DeleteByKey(ctx, req.(*DeleteByKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DatabaseService_ServiceDesc is the grpc.ServiceDesc for DatabaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatabaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DatabaseService",
	HandlerType: (*DatabaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByKey",
			Handler:    _DatabaseService_GetByKey_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _DatabaseService_GetAll_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _DatabaseService_Insert_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DatabaseService_Update_Handler,
		},
		{
			MethodName: "DeleteByKey",
			Handler:    _DatabaseService_DeleteByKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/raw/mydb.proto",
}
